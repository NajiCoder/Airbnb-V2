// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?  @unique
  emailVerified DateTime?
  image     String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?  @db.String
  accessToken       String?  @db.String
  expiresAt         Int?
  tokenType         String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?


  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // creates a 1:1 relation between User and Account models with cascading delete

  @@unique([provider, providerAccountId]) // creates a unique constraint on the combination of provider and providerAccountId
}

model Listing {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  title              String
  description        String
  imageSrc           String
  createdAt          DateTime @default(now())
  catagory           String
  roomCount          Int
  bathroomCount      Int
  guestCount         Int
  locationValue      String
  price              Int


  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  listingId          String   @db.ObjectId
  startDate          DateTime
  endDate            DateTime
  totalPrice         Int
  createdAt          DateTime @default(now())


  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing   Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
}